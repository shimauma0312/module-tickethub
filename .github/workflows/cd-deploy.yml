name: CI/CD - Deploy

on:
  push:
    branches: [ main, master ]

jobs:
  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        run: go mod download

      - name: Test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          flags: backend
          fail_ci_if_error: false

      - name: Build
        run: go build -v ./...
        
      - name: Archive backend binary
        uses: actions/upload-artifact@v3
        with:
          name: backend-binary
          path: backend/module-tickethub
          retention-days: 7
        
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: ./frontend/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build
        
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/.output
          retention-days: 7
          
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker Compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./docker-compose.yml"
          down-flags: "--volumes"
          
      - name: Install Playwright
        run: |
          cd tests
          npm ci
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          cd tests
          npx playwright test
          
      # E2Eテスト結果レポートのアップロード
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: tests/playwright-report/
          retention-days: 30
          
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [e2e-test]
    steps:
      - uses: actions/checkout@v3
      
      # ここに本番環境へのデプロイ手順を記述します
      # 例: AWS ECR へのプッシュと ECS/Kubernetes へのデプロイなど
      
      - name: Build and push production Docker images
        run: |
          echo "Building and pushing Docker images to registry"
          docker-compose -f docker-compose.prod.yml build
          
      # 実際のデプロイ手順はサーバー環境によって異なります
      - name: Deploy to production
        run: |
          echo "Deployment step would go here"
          # 例: AWS CLI、kubectl や他のデプロイツールを使用
